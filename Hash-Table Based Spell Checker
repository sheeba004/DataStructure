#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define HASHSIZE 101

struct word {
    char *word;
    struct word *next;
};

struct word *hashtab[HASHSIZE] = { NULL };

unsigned hash(const char *s) {
    unsigned hashval;
    for (hashval = 0; *s != '\0'; s++) {
        hashval = *s + 31 * hashval;
    }
    return hashval % HASHSIZE;
}
struct word *lookup(const char *s) {
    struct word *np;
    for (np = hashtab[hash(s)]; np != NULL; np = np->next) {
        if (strcmp(s, np->word) == 0) {
            return np;
        }
    }
    return NULL;
}

struct word *install(const char *s) {
    struct word *np;
    unsigned hashval;
    if ((np = lookup(s)) == NULL) {
        np = (struct word *) malloc(sizeof(*np));
        if (np == NULL || (np->word = strdup(s)) == NULL) {
            return NULL;
        }
        hashval = hash(s);
        np->next = hashtab[hashval];
        hashtab[hashval] = np;
    }
    return np;
}                              
void load_dictionary() {
    // List of predefined words
    static const char *words[] = {
        "apple", "banana", "orange", "grape", "peach",
        "melon", "berry", "kiwi", "mango", "pineapple",
        "strawberry", "raspberry", "blueberry", "blackberry"
    };
    int num_words = sizeof(words) / sizeof(words[0]);
    for (int i = 0; i < num_words; i++) {
        install(words[i]);
    }
}

int main() {
    // Initialize a const char * variable with a greeting message
    const char *greeting = "Welcome to the Spell Checker Program!";
    printf("%s\n\n", greeting);

    // Load the predefined dictionary
    load_dictionary();

    // Spell check
    char text[1000];
    printf("Enter text to spell check: ");
    fgets(text, sizeof(text), stdin);

    char *token = strtok(text, " \n");
    while (token != NULL) {
        // Remove punctuation
        char *cleaned_word = malloc(strlen(token) + 1);
        if (cleaned_word == NULL) {
            fprintf(stderr, "Memory allocation failed\n");
            return 1;
        }
        int j = 0;
        for (int i = 0; token[i]; i++) {
            if (isalpha(token[i])) {
                cleaned_word[j++] = tolower(token[i]);
            }
        }
        cleaned_word[j] = '\0';          
        // Check spelling
        struct word *result = lookup(cleaned_word);
        if (result != NULL) {
            printf("Correct spelling: %s\n", token);
        } else {
            printf("Incorrect spelling: %s\n", token);
        }

        free(cleaned_word);
        token = strtok(NULL, " \n");
    }

    return 0;
}
